# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.
# This file configures Charmcraft.
# See https://juju.is/docs/sdk/charmcraft-config for guidance.

type: charm
bases:
  - build-on:
      - name: "ubuntu"
        channel: "22.04"
    run-on:
      - name: "ubuntu"
        channel: "22.04"
parts:
  charm:
    build-packages:
      - libffi-dev
      - libssl-dev
      - libxml2-dev
      - libxslt-dev
      - pkg-config
      - python3-dev
    build-snaps:
      - rustup
    charm-requirements:
      - requirements-charmcraft.txt
    override-build: |
      rustup default stable
      craftctl default
      # charmcraft filters all environment variables, build statically linked variant of lxml here
      ls -lah $CRAFT_PART_INSTALL/venv
      CFLAGS="-O3 -g1 -pipe -fPIC -flto" \
        LDFLAGS="-fPIC -flto" \
        STATIC_DEPS="true" \
        $CRAFT_PART_BUILD/staging-venv/bin/pip \
        install --target $CRAFT_PART_INSTALL/venv -v \
        --no-binary :all: \
        $(grep lxml requirements-lxml.txt)
      # install all remaining packages depends on lxml
      $CRAFT_PART_BUILD/staging-venv/bin/pip \
        install --target $CRAFT_PART_INSTALL/venv -v \
        --no-binary :all: \
        -r requirements-lxml.txt

name: wazuh-server
summary: A charm deploying the Wazuh Server.
links:
  documentation: https://discourse.charmhub.io/t/wazuh-server-documentation-overview/18199
  contact: https://launchpad.net/~canonical-is-devops
  issues: https://github.com/canonical/wazuh-server-operator/issues
  source: https://github.com/canonical/wazuh-server-operator
description: |
  A [Juju](https://juju.is/) [charm](https://juju.is/docs/olm/charmed-operators)
  deploying and managing [Wazuh Server]
  (https://documentation.wazuh.com/current/getting-started/components/wazuh-server.html)
  on Kubernetes. [Wazuh](https://wazuh.com/) is an open-source XDR and SIEM
  tool for endpoints and cloud workloads.

  This charm simplifies initial deployment and "day N" operations of Wazuh
  on Kubernetes, such as scaling the number of instances, TLS certificates
  configuration and more. It allows for deployment on various
  [Kubernetes platforms](https://ubuntu.com/kubernetes) offered by Canonical.

  As such, the charm makes it easy for those looking to take control of their own
  XDR and SIEM system whilst keeping operations simple, and gives them the
  freedom to deploy on the Kubernetes platform of their choice.

  For DevOps or SRE teams this charm will make operating Wazuh simple and
  straightforward through Juju's clean interface. It will allow easy deployment
  into multiple environments for testing of changes, and supports scaling out for
  enterprise deployments.
assumes:
  - juju >= 3.1.0
  - k8s-api
containers:
  wazuh-server:
    resource: wazuh-server-image
    mounts:
      - storage: data
        location: /var/log/collectors
charm-libs:
  - lib: data_platform_libs.data_interfaces
    version: "0"
  - lib: traefik_k8s.traefik_route
    version: "0"
  - lib: tls_certificates_interface.tls_certificates
    version: "3"
resources:
  wazuh-server-image:
    type: oci-image
    description: OCI image for the Wazuh Server
provides:
  grafana-dashboard:
    interface: grafana_dashboard
  metrics-endpoint:
    interface: prometheus_scrape
  wazuh-api:
    interface: wazuh_api_client
  opencti-connector:
    interface: opencti_connector
    limit: 1
    required: false
requires:
  certificates:
    interface: tls-certificates
    limit: 1
  ingress:
    interface: traefik_route
    limit: 1
  logging:
    interface: loki_push_api
    limit: 1
  opensearch-client:
    interface: opensearch_client
    limit: 1
config:
  options:
    agent-password:
      type: secret
      description: >
        The Juju secret ID corresponding to the password used by the agents to connect to Wazuh.
    custom-config-repository:
      type: string
      description: >
        A repository URL where configurations are stored for Wazuh, rsyslog, or both.
        The URL has to be provided in the format git+ssh://username@repository@ref, where
        'username' is mandatory and 'ref' is optional and may be either a branch name or tag name.
        Tags are encouraged for reproducibility and for efficiency.
        If a branch is provided, the charm will re-pull the configuration on most charm events,
        as it cannot guarantee that it has the latest commits otherwise.
        The charm checks for the paths var/ossec/, etc/rsyslog.conf, and etc/rsyslog.d/ within
        the configuration repository and patches those configuration files over the corresponding
        paths on the live system: /var/ossec, /etc/rsyslog.conf, and /etc/rsyslog.d/, respectively.
    custom-config-ssh-key:
      type: secret
      description: >
        The Juju secret ID corresponding to the private key for SSH authentication to the git repository.
        The secret should contain a single key, "value", which maps to the actual SSH key. 
        To create the secret, run the following command: 
        `juju add-secret my-custom-config-ssh-key value=<ssh-key> && juju grant-secret my-custom-config-ssh-key wazuh-server`,
        and use the secret ID output to configure this option.
    logs-ca-cert:
      type: string
      description: >
        The certification authority certificate used to sign client certificates that the server
        should accept logs from.
peers:
  wazuh-peers:
    interface: wazuh-instance
storage:
  data:
    type: filesystem
